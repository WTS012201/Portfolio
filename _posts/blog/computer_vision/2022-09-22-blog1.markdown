---
layout: post
excerpt_separator: <!--more-->
permalink: /blog/computer_vision/Image_Stitching
title: Image Stitching
date: 2022-09-22
category: 1
image: /content/cv/stitching/featured.png
---

**Image Stitching** is a process that involves a sequence of algorithms to produce a scene from multiple images<!--more-->

* TOC
{:toc}

# **Feature Detection with SIFT**
If we want to construct a whole scene given several different images, we must first search for what features one piece shares in common with another piece. These features must also be recognizable from different perspectives. 

An algorithm that is commonly used for this type of problem is SIFT (Scale Invariant Feature Transform). It applies a sequence of mathmetaical operations on an image and reveals what points describe the image the most.

How it works...

## **Scale-space Construction**

When looking at an object in the real world, it is much easier to give more descriptions of the object when it is right in front of your eyes as opposed to being further away. A person standing a few feet away is much easier to describe than a person that is 500 feet away. A scale space attempts to remove descriptors of an object so that it's indistinguishable at any size, meaning we can give the same description from different perspectives.

SIFT convolves an image with a 2D Gaussian to produce a scale space defined as: 

$$
L(x,y,\sigma)=G(x,y,\sigma)\ast I(x,y)
$$

$$
G(x,y,\sigma)=\frac{1}{2\pi\sigma^{2}} \exp \left(-\frac{x^{2} + y^{2}}{2\sigma^2} \right)
$$

where $$L$$ is the convolution of image $$I$$ and 2D Gaussian $$G$$ with standard deviation $$\sigma$$ as the scale parameter. Since $$I$$ is discrete, Gaussian $$G$$ is discretized into a kernel to perform the operation in practice.

SIFT applies this multiple times to the same image with progessively higher scale values to create an octave. The scale parameter will increase by $$\sigma_{i}=k\sigma_{i-1}$$. Then it resizes the image by half and repeats the same process for the next octave.  


![octaves.png](/content/cv/stitching/octaves.png)

## **Difference of Gaussian (DoG)**

The motivation of DoG is to serve as a speedy alternative for blob detection while also maintaining scale invariance. Typically, a scale-normalized Laplacian of Gaussian (LoG) is used for this, but with a bit of clever math, DoG can acheive a good approximation of scale-normalized LoG efficiently as the smoothed image $$L$$ can be used for scale space feature description by basic image subtraction.

**Proving DoG $$\approx$$ LoG**

The Laplacian of Gaussian for image $$ I $$ is given as:

$$
\nabla^{2}L=\nabla^{2}(G\ast I)=\underbrace{\nabla^{2}G}_\textrm{LoG}\ast I
$$

LoG can be expanded to:

$$
\frac{\partial^{2}G}{\partial x^{2}}=\frac{G(x,y,\sigma)}{\sigma^{2}} \left(\frac{x^2}{\sigma^2} - 1\right) \\

\frac{\partial^{2}G}{\partial y^{2}}=\frac{G(x,y,\sigma)}{\sigma^{2}} \left(\frac{y^2}{\sigma^2} - 1\right)
$$

$$
\nabla^{2}G=\frac{\partial^{2}G}{\partial x^{2}} + \frac{\partial^{2}G}{\partial y^{2}} =
\frac{G(x,y,\sigma)}{\sigma^{2}}\left(\frac{x^2 + y^2}{\sigma^2} - 2\right)
$$

Then the derivative of the Gaussian kernel can be expressed as:

$$
\begin{align}
\frac{\partial G}{\partial \sigma} &= \sigma \left[ \frac{G(x,y,\sigma)}{\sigma^{2}} \left(\frac{x^2 + y^2}{\sigma^2} - 2\right) \right] = \sigma \nabla^{2}G 
\end{align}
$$

Scale normalized LoG is obtained by eliminating the $$\sigma^{-2}$$ term:

$$
\sigma^{2} \left[ \nabla^{2}G = \frac{G(x,y,\sigma)}{\sigma^{2}}\left(\frac{x^2 + y^2}{\sigma^2} - 2\right) \right] \\
\underbrace{\sigma^{2}\nabla^{2}G}_\textrm{Scale Norm LoG} = G(x,y,\sigma)\left(\frac{x^2 + y^2}{\sigma^2} - 2\right)
$$

Using this, we can take the finite difference approximation using nearby scales $$\sigma$$ and $$k\sigma$$ to discover the relationship between scale-normalized LoG and DoG. 

$$
\begin{align}
\frac{\partial G}{\partial \sigma} =\sigma \nabla^{2}G \approx \frac{G(x,y,k\sigma) - G(x,y,\sigma)}{k\sigma - \sigma} \\
\sigma \nabla^{2}G \approx \frac{G(x,y,k\sigma) - G(x,y,\sigma)}{\sigma(k - 1)} \\
(k-1)\underbrace{\sigma^{2}\nabla^{2}G}_\textrm{Scale Norm LoG} \approx \underbrace{G(x,y,k\sigma) - G(x,y,\sigma)}_\textrm{DoG}
\end{align}
$$

This shows that when taking the difference between two Gaussians with scales differing by constant factor $$k$$, the $$\sigma^{2}$$ scale normalization required for scale invariant LoG is automatically incorperated. Factor (k - 1) remains constant for every $$\sigma$$ which means that it will not influence extrema locality which is important for the following steps.

![DoG.png](/content/cv/stitching/DoG.png)

## **Local Extrema Detection**

Now that we have a good representation of regions with rapid changes in the image from DoG, we can locate the extrema of a DoG image by applying the following. For detecting an extrema, points are sampled in the image and then compared to its eight neighbors and nine neighbors in the previous scale and next scale. It is selected as a keypoint candidate if the value is greater than or less than all of its neighbors.


![extremas.png](/content/cv/stitching/extremas.png)